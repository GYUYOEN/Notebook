package exam02_N;

public class Sample01_N {

	public static void main(String[] args) {
		/*
		 * 반복문
		 *      - 프로그램 코드의 실행을 제어하기 위헤 사용되는 문법
		 *      - 반목문은 for, while, do ... while 이 있다.
		 *      - 반복문은 0 ~ 무한 반복 까지 자유홉게 설정할 수 있다.
		 *      - 무한반복의 경우 프로그램의 실행이 무한번 동작하기 때문에 CPU에 부담을 줄 수 있다.(주의 할 것)
		 *        만약 이클립스에서 원치 않은 무한반복이 동작한 경우 프로그램을 강제 종료하면 된다.
		 */
		
		/*
		 * for 문 형식
		 *     for(초기식; 조건식; 증감식) {
		 *         반복 실행할 코드는 여기에 작성
		 *     }
		 *     
		 * 초기식 : 반복문에 반복 횟수를 정할 때 초기에 사용될 값을 설정하기 위해 사용된다.
		 *        생략 가능하며, 반복문 외부에 미리 초기값을 설정헤서 사용하기도 한다.
		 * 조건식 : 반복을 수행 여부의 조건을 설정하기 위해 사용한다.
		 *        조건식의 내용에 따라 반복 횟수가 달라진다. 또한 잘못된 조건식 설정으로 무한반목이 될 수 있다.
		 *        생략 가능 하며, 단 생략을 하면 조건이 항상 참이 되어 무한 반복이 되며, 이를 제어하기 위해 반복문
		 *        내부에 별도의 if 조건문과 break 를 작성하며 종료 조건을 반드시 생성해야 한다.
		 * 증감식 : 값의 증감을 통해 반복문의 조건식의 조건을 맞추어 주기위해 사용 한다.
		 *        주로 ++, -- 증감연산을 사용한다. 단 증감값이 2 이상이 필요한 경우 복합할당 연산을 활용한다.
		 *        생략 갸능하며, 단 생략을 하면 종료 조건에 맞는 값을 설정할 수 없어 무한반복이 될 수 있다.
		 *        내부에 별도의 증감식을 반드시 작성해야 한다. 
		 */
		
		
		//      1       2,5    4
		for(int i = 0; i < 5; i++) {  // 초기값이 0 이므로 0 부터 진행
			System.out.printf("%d 번쨰 반복!!\n", i);  // 3, 조건식이 거짓이 될 떄까지 5 -> 3 -> 4 -> 5 반복적으로 실행
		}
		
		// 1. 초기식 셍랙
		int i = 0;  // 초기식 생략하려면 외부에 미리 초기값 설정
		for(; i < 5; i++) {  // 식 생략 할 때 ; 생략x
			System.out.printf("%d 번째 반복!!\n", i);
		}
		
		// 2. 조건식 생략
		for(i = 0;; i++) {  // 조건식 설정을 안하면 무한반복됨
			System.out.printf("%d 번째 반복!!\n", i);
			if(i >= 5) {  // 따라서 내부에 if, break 작성
				break;
			}
		}
		
		// 조건식 위치를 바꿨을 경우
		for(i = 0;; i++) {
			if(i >= 5) {
				break;
			}
			System.out.printf("%d 번째 반복!!\n", i);
		}
		
		// 3. 증감식 생략
		for(i = 0; i < 5;) {  // 증감식도 설정을 안하면 무한반복됨
			i++;
			System.out.printf("%d 번째 반복!!\n", i);
		}
		
		// 위치 바꿨을 경우
		for(i = 0; i < 5;) {
			System.out.printf("%d 번째 반복!!\n", i);
			i++;
		}
		
		// 4. 전부 생략
		i = 0;
		for(;;) {
			System.out.printf("%d 번째 반복!!\n", i);
			if(i >= 5) {
				break;
			}
			i++;
		}
	} // 6

}
